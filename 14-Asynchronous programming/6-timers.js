/*Реализуйте и экспортируйте по умолчанию асинхронную функцию, которая следит за изменением файла с заданной периодичностью. 
Функция должна возвращать идентификатор таймера, запущенного внутри.

Если файл был изменён со времени предыдущей проверки, то необходимо вызвать колбек. Если во время анализа файла (через fs.stat) произошла ошибка, 
то нужно остановить таймер и вызвать колбек, передав туда ошибку.

Отслеживание изменений файла должно начинаться с момента вызова функции. Параметры функции:

Путь до файла, который нужно отслеживать
Период отслеживания
Колбек, принимающий аргументом ошибку
import watch from './watcher.js';
 
const id = watch(filepath, 500, (err) => {
  console.log('Wow!');
});
 
setTimeout(() => fs.appendFileSync(filepath, 'ehu'), 700);
setTimeout(() => clearInterval(id), 5000); // остановить отслеживание через 5 секунд
Функция должна постоянно отслеживать изменения файла и вызывать колбек, если обнаружено изменение файла. После вызова колбека, функция должна продолжать отслеживать измения. 
Отслеживание останавливают сами тесты, для этого ваша функция должна возвращать id таймера.*/

const watch = (filepath, period, cb) => {
  let lastCheck = Date.now();
  const check = (timerId) => {
    fs.stat(filepath, (err, stats) => {
      if (err) {
        clearInterval(timerId);
        cb(err);
        return;
      }
      const { mtimeMs } = stats;
      if (mtimeMs > lastCheck) {
        cb(null);
        lastCheck = mtimeMs;
      }
    });
  };
  const id = setInterval(() => check(id), period);
  return id;
};

export default watch;
